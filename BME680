//Set up the libraries to include in the sketch
#include "GPS_Air530.h"
#include "GPS_Air530Z.h"
#include "LoRaWan_APP.h"
#include "Arduino.h"
#include <Wire.h>
#include <SparkFunBME280.h> //Click here to get the library: http://librarymanager/All#SparkFun_BME280
//#include <SparkFunCCS811.h> //Click here to get the library: http://librarymanager/All#SparkFun_CCS811
#include <arduino-geohash.h>    // git clone https://github.com/dennisg/arduino-geohash into library
//#include "LIDARLite_v4LED.h"
//#include "SparkFun_AS7265X.h" //Click here to get the library: http://librarymanager/All#SparkFun_AS7265X
#include <string.h>
#include <Timestamps.h>   //  git clone https://github.com/alve89/Timestamps into library
#include <Arduino.h>     // every sketch needs this
#include <Wire.h>        // instantiate the Wire library
//#include <TFLI2C.h>      // TFLuna-I2C Library v.0.2.0   git clone https://github.com/budryerson/TFLuna-I2C
//#include "HT_SSD1306Wire.h"
#include "Zanshin_BME680.h"  // Include the BME680 Sensor library
BME680_Class BME680;  ///< Create an instance of the BME680 class
float altitude(const int32_t press, const float seaLevel = 1013.25);
float altitude(const int32_t press, const float seaLevel) {
  static float Altitude;
  Altitude = 44330.0 * (1.0 - pow(((float)press / 100.0) / seaLevel, 0.1903));  // Convert into meters
  return (Altitude);
}  // of method altitude()

//TFLI2C tflI2C;

//int16_t  tfDist;    // distance in centimeters
//int16_t  tfAddr = TFL_DEF_ADR;  // use this default I2C address or
                                // set variable to your own value

//Define the UNIQUE ID of this sensor and clarify the channel ID is 2001
const char * sensor_id = "D2";
const char * channel_id = "<5401>";

//Set up the LoRa parameters
#define RF_FREQUENCY                                915000000 // Hz
#define TX_OUTPUT_POWER                             14        // dBm
#define LORA_BANDWIDTH                              0         // [0: 125 kHz,
                                                              //  1: 250 kHz,
                                                              //  2: 500 kHz,
                                                              //  3: Reserved]
#define LORA_SPREADING_FACTOR                       7         // [SF7..SF12]
#define LORA_CODINGRATE                             1         // [1: 4/5,
                                                              //  2: 4/6,
                                                              //  3: 4/7,
                                                              //  4: 4/8]
#define LORA_PREAMBLE_LENGTH                        8         // Same for Tx and Rx
#define LORA_SYMBOL_TIMEOUT                         0         // Symbols
#define LORA_FIX_LENGTH_PAYLOAD_ON                  false
#define LORA_IQ_INVERSION_ON                        false
#define RX_TIMEOUT_VALUE                            1000
#define BUFFER_SIZE                                 30 // Define the payload size here

//Set Up LoRa Global Variables
static RadioEvents_t RadioEvents;
int16_t rssi,rxSize;

//Set the initial values for the BME and CCS and set up these sensor objects
#define CCS811_ADDR 0x5B //Default I2C Address
#define PIN_NOT_WAKE 5
//CCS811 myCCS811(CCS811_ADDR);
//BME280 myBME280;

//Set up the initial values for the LIDAR object
//LIDARLite_v4LED myLIDAR; //Click here to get the library: http://librarymanager/All#SparkFun_LIDARLitev4 by SparkFun

//Set up the initial values for the Spec object
//AS7265X mySpec;
//Set up the GPS module
Air530ZClass GPS;
// Set up hasher
GeoHash hasher(14);
Timestamps ts(3600);
//Define linear transformations Applied to Data
int mycounter = 0;
int TVOC_min = 0;
int TVOC_max = 1187;
int CO2_min = 200;
int CO2_max = 8192;
int Temp_min = (-40);
int Temp_max = 85;
int Humid_min = 0;
int Humid_max = 100;
int Pres_min = 0;
int Pres_max = 110000;
int Alt_min = 0;
int Alt_max = 9200;
int Eul_min = (-180);
int Eul_max = 180;
int Spec_min = 0;
int Spec_max = 12000;
int Vol_min = 0;
int Vol_max = 1000;
float newDistance=99.99; 
float CO2ppm=99.9;
float RHpct= 99.99;
float TempC=99.9;
float PresPa=99.99;
void  DoubleToString( char *str, double double_num,unsigned int len);
void  VextON(void);

void setup() {
    VextON();

    //Initiate Serial Communication at a Baud Rate of 115200 and turn on the I2C bus
    Serial.begin(115200);
    Wire.begin();
    
    //Set up the LoRa Ratio Using parameters defined above
    rssi=0;
    Radio.Init( &RadioEvents );
    Radio.SetSyncWord(0x34);
    Radio.SetChannel( RF_FREQUENCY );
    Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
                                   LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                                   LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   true, 0, 0, LORA_IQ_INVERSION_ON, 3000 ); 
   
    //Calling .begin() causes the settings to be loaded
    delay(10); //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.
//    myBME280.begin();

    //Set up the GPS
    GPS.begin();
   //Set up the LIDAR
//    myLIDAR.begin();
    //Set up the Spec
//    mySpec.begin();
  Serial.print(F("Starting I2CDemo example program for BME680\n"));
  Serial.print(F("- Initializing BME680 sensor\n"));
  while (!BME680.begin(I2C_STANDARD_MODE)) {  // Start BME680 using I2C, use first device found
    Serial.print(F("-  Unable to find BME680. Trying again in 5 seconds.\n"));
    delay(5000);
  }  // of loop until device is located
  Serial.print(F("- Setting 16x oversampling for all sensors\n"));
  BME680.setOversampling(TemperatureSensor, Oversample16);  // Use enumerated type values
  BME680.setOversampling(HumiditySensor, Oversample16);     // Use enumerated type values
  BME680.setOversampling(PressureSensor, Oversample16);     // Use enumerated type values
  Serial.print(F("- Setting IIR filter to a value of 4 samples\n"));
  BME680.setIIRFilter(IIR4);  // Use enumerated type values
  Serial.print(F("- Setting gas measurement to 320\xC2\xB0\x43 for 150ms\n"));  // "�C" symbols
  BME680.setGas(320, 150);  // 320�c for 150 milliseconds  
}

void loop()
{
  VextON();
  mycounter=mycounter+1;

  static int32_t  temp, humidity, pressure, gas;  // BME readings
  static char     buf[16];                        // sprintf text buffer
  static float    alt;                            // Temporary variable
  static uint16_t loopCounter = 0;                // Display iterations
  if (loopCounter % 25 == 0) {                    // Show header @25 loops
    Serial.print(F("\nLoop Temp\xC2\xB0\x43 Humid% Press hPa   Alt m Air m"));
    Serial.print(F("\xE2\x84\xA6\n==== ====== ====== ========= ======= ======\n"));  // "�C" symbol
  }                                                     // if-then time to show headers
  BME680.getSensorData(temp, humidity, pressure, gas);  // Get readings
  if (loopCounter++ != 0) {                             // Ignore first reading, might be incorrect
    sprintf(buf, "%4d %3d.%02d", (loopCounter - 1) % 9999,  // Clamp to 9999,
            (int8_t)(temp / 100), (uint8_t)(temp % 100));   // Temp in decidegrees
    Serial.print(buf);
    sprintf(buf, "%3d.%03d", (int8_t)(humidity / 1000),
            (uint16_t)(humidity % 1000));  // Humidity milli-pct
    Serial.print(buf);
    sprintf(buf, "%7d.%02d", (int16_t)(pressure / 100),
            (uint8_t)(pressure % 100));  // Pressure Pascals
    Serial.print(buf);
    alt = altitude(pressure);                                                // temp altitude
    sprintf(buf, "%5d.%02d", (int16_t)(alt), ((uint8_t)(alt * 100) % 100));  // Altitude meters
    Serial.print(buf);
    sprintf(buf, "%4d.%02d\n", (int16_t)(gas / 100), (uint8_t)(gas % 100));  // Resistance milliohms
    Serial.print(buf);

  }
//   if( tflI2C.getData( tfDist, tfAddr)) // If read okay...
    {
//        Serial.print("Dist: ");
//        Serial.println(tfDist);          // print the data...
    }
//  else tflI2C.printStatus();           // else, print error.

  uint32_t starttime = millis();
  while( (millis()-starttime) < 1000 )
  {
    while (GPS.available() > 0)
    {
      GPS.encode(GPS.read());
    }
  }
//  displayInfo();
  if (millis() > 5000 && GPS.charsProcessed() < 10)
  {
    Serial.println("No GPS detected: check wiring.");
    while(true);
  }

int TYear = GPS.date.year();
int TMonth = GPS.date.month();
int TDay = GPS.date.day();
int THour = GPS.time.hour();
int TMin = GPS.time.minute();
int TSec = GPS.time.second();
int tse = ts.getTimestampUNIX(TYear, TMonth, TDay, THour, TMin, TSec);
Serial.println(ts.getTimestampUNIX(TYear, TMonth, TDay, THour, TMin, TSec));
int GPSAltm = GPS.altitude.meters();
Serial.println(GPSAltm);
int GPSHdop = GPS.hdop.hdop();
Serial.println(GPSHdop);
float GPSLat = float(GPS.location.lat());
float GPSLng = float(GPS.location.lng());
int GPSspkmph = GPS.speed.kmph();
const char* geohash = hasher.encode(GPSLat, GPSLng);
Serial.print("http://geohash.org/");
Serial.println(geohash);

//Read the LIDAR
//int newDistance = myLIDAR.getDistance()/100;


//Prepare the GPS string and send the data
char pos[150];
Serial.println("Making Packet:");
//"%sID%sTS%sGH%dA%dV%dD%dLD%dCO%dTV%dRH%dT&dP%d"
// sensor_id, tse, geohash, GPSAltm, GPSspkmph, GPSHdop, newDistance, CO2ppm, TVOC_min, RHpct, TempC, PresPa
//sprintf(pos,"%sID%sTS%dGH%sA%dV%dLD%dCO%dTV%dRH%dT%dP%dC%i", channel_id, sensor_id, tse, geohash, GPSAltm, GPSspkmph, newDistance, CO2ppm, TVOC_min, RHpct, TempC, PresPa, (int)1);
sprintf(pos,"%sID%sTS%dGH%sA%dV", channel_id, sensor_id, tse, geohash, GPSAltm, GPSspkmph);
char s_buf[10];      // newDistance, CO2ppm, TVOC_min, RHpct, TempC, PresPa
                     // %dLD%dCO%dTV%dRH%dT%dP%d
dtostrf(newDistance,1,1, &s_buf[0]);
sprintf(pos,"%s%s%s",pos,"LD",s_buf);
//dtostrf(CO2ppm,1,1, &s_buf[0]);
//sprintf(pos,"%s%s%s",pos,"CO",s_buf);
//dtostrf(TVOC_min,1,1, &s_buf[0]);
//sprintf(pos,"%s%s%s",pos,"TV",s_buf);
dtostrf(gas/100,1,1, &s_buf[0]);
sprintf(pos,"%s%s%s",pos,"GR",s_buf);
RHpct=humidity/1000.0;
dtostrf(RHpct,1,1, &s_buf[0]);
sprintf(pos,"%s%s%s",pos,"RH",s_buf);
TempC=temp/100.0;
dtostrf(TempC,1,1, &s_buf[0]);
sprintf(pos,"%s%s%s",pos,"T",s_buf);
PresPa=pressure/100.0;
dtostrf(PresPa,1,1, &s_buf[0]);
sprintf(pos,"%s%s%s",pos,"P",s_buf);
sprintf(pos,"%s%s%d",pos,"C",mycounter);
if(mycounter == 9){mycounter = 0;}
Serial.println(strlen(pos));
Serial.println(pos);
Serial.println("Sending...");
Radio.SetSyncWord(0x34);
Radio.Send((uint8_t *)pos, strlen(pos)); //send the package out uint8_t *)txpacket, strlen(txpacket) 
Serial.println("Packet Sent");
Serial.println(pos);
delay(5000);
}
// For power savings, can turn off and on power with VextOFF and VextON 
void VextON(void)
{
  pinMode(Vext,OUTPUT);
  digitalWrite(Vext, LOW);
}
// We don't use this yet, but it might be useful later
// 
void  DoubleToString( char *str, double double_num,unsigned int len) {
  double fractpart, intpart;
  fractpart = modf(double_num, &intpart);
  fractpart = fractpart * (pow(10,len));
  sprintf(str + strlen(str),"%d", (int)(intpart)); //Integer part
  sprintf(str + strlen(str), ".%d", (int)(fractpart)); //Decimal part
}
